'use strict';

function _typeof(obj) {
  if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype
        ? 'symbol'
        : typeof obj;
    };
  }
  return _typeof(obj);
}

(function() {
  var Slider = (function() {
    function Slider(config) {
      if (!(this instanceof Slider)) {
        return new Slider(config);
      } else {
        var defaultConfig = {
          wrapper: document.body,
          slides: [],
          dots: true,
          buttons: true,
          auto: true,
          pause: 5000,
          transitionTime: 400
        };
        this.testConfig(config);
        this.wrapper = config.wrapper || defaultConfig.wrapper;
        this.wrapperWidth = this.wrapper.clientWidth;
        this.slides = config.slides || defaultConfig.slides;
        this.enableDots = typeof config.dots === 'boolean' ? config.dots : defaultConfig.dots;
        this.buttons = typeof config.buttons === 'boolean' ? config.buttons : defaultConfig.buttons;
        this.auto = typeof config.auto === 'boolean' ? config.auto : defaultConfig.auto;
        this.container = null;
        this.slider = null;
        this.sliderItems = [];
        this.dots = [];
        this.prevBtn = null;
        this.nextBtn = null;
        this.interval = null;
        this.currentImage = 0;
        this.currentDot = 0;
        this.transitionTime =
          typeof config.transitionTime === 'number' ? Math.round(config.transitionTime) : defaultConfig.transitionTime;
        this.pause =
          typeof config.pause === 'number'
            ? Math.round(config.pause) + this.transitionTime
            : defaultConfig.pause + this.transitionTime;
        this.transition = 'all '.concat(this.transitionTime, 'ms ease-in-out');
      }
    }

    Slider.prototype.testConfig = function(config) {
      if (!(config instanceof Object)) {
        throw new Error('Argument must be object');
      }

      if (!(config.wrapper instanceof HTMLDivElement)) {
        throw new Error('Wrapper must be div element');
      }

      if (!Array.isArray(config.slides) || config.slides.length < 2) {
        throw new Error('Slides must be type of array and must have minimum 2 elements');
      } else {
        config.slides.forEach(function(obj) {
          if (_typeof(obj) !== 'object') {
            throw new Error('Every element in images array must be type of object');
          }
        });
      }
    };

    Slider.prototype.createContainer = function() {
      this.container = document.createElement('div');
      this.container.classList.add('slider-container');
      this.wrapper.appendChild(this.container);
    };

    Slider.prototype.createSlider = function() {
      this.slider = document.createElement('ul');
      this.slider.classList.add('slider');
      this.container.appendChild(this.slider);
    };

    Slider.prototype.createSliderItems = function() {
      var _this = this;

      this.slides.forEach(function(slide) {
        var item = document.createElement('li');
        item.classList.add('slider-item');
        var slideBackground = typeof slide.image === 'string' ? 'url('.concat(slide.image, ')') : 'transparent';
        item.style.backgroundImage = slideBackground;
        var container = document.createElement('div');
        container.classList.add('slider-item-container');
        var title = document.createElement('h6');
        title.classList.add('slider-item-header');
        var slideTitle = typeof slide.header === 'string' ? ''.concat(slide.header) : '';
        title.textContent = slideTitle;
        var content = document.createElement('p');
        content.classList.add('slider-item-content');
        var slideContent = typeof slide.content === 'string' ? ''.concat(slide.content) : '';
        content.textContent = slideContent;
        item.appendChild(container);
        container.appendChild(title);
        container.appendChild(content);

        _this.sliderItems.push(item);
      });
    };

    Slider.prototype.cloneFirstElement = function(element) {
      var elementCopy = element.cloneNode(true);
      this.slider.appendChild(elementCopy);
      this.sliderItems.push(elementCopy);
    };

    Slider.prototype.addItemsToSlider = function() {
      var _this2 = this;

      this.sliderItems.forEach(function(item) {
        _this2.slider.appendChild(item);
      });
    };

    Slider.prototype.setTransitionOnSlider = function() {
      this.slider.style.transition = this.transition;
    };

    Slider.prototype.setWidthOnElements = function() {
      var _this3 = this;

      this.width = this.wrapper.clientWidth;
      this.slider.style.width = ''.concat(this.width * this.sliderItems.length, 'px');
      this.sliderItems.forEach(function(slide) {
        slide.style.width = ''.concat(_this3.width, 'px');
      });
    };

    Slider.prototype.createButtons = function() {
      if (this.buttons === true) {
        this.prevBtn = document.createElement('button');
        this.prevBtn.classList.add('prev-btn');
        this.prevBtn.type = 'button';
        this.prevBtn.textContent = '<';
        this.nextBtn = document.createElement('button');
        this.nextBtn.classList.add('next-btn');
        this.nextBtn.type = 'button';
        this.nextBtn.textContent = '>';
        this.container.appendChild(this.prevBtn);
        this.container.appendChild(this.nextBtn);
      }
    };

    Slider.prototype.prevSlide = function() {
      var _this4 = this;

      this.currentImage--;

      if (this.currentImage < 0) {
        this.currentImage = this.sliderItems.length - 1;
        this.slider.style.transition = 'none';
        this.changeSlide(this.currentImage);
        setTimeout(function() {
          _this4.slider.style.transition = _this4.transition;
          _this4.currentImage--;

          _this4.changeSlide(_this4.currentImage);

          _this4.actualDot(-1);
        }, 100);
      } else {
        this.changeSlide(this.currentImage);
        this.actualDot(-1);
      }
    };

    Slider.prototype.nextSlide = function() {
      var _this5 = this;

      this.currentImage++;

      if (this.currentImage > this.sliderItems.length - 1) {
        this.currentImage = 0;
        this.slider.style.transition = 'none';
        this.changeSlide(this.currentImage);
        setTimeout(function() {
          _this5.slider.style.transition = _this5.transition;
          _this5.currentImage++;

          _this5.changeSlide(_this5.currentImage);

          _this5.actualDot(1);
        }, 100);
      } else {
        this.changeSlide(this.currentImage);
        this.actualDot(1);
      }
    };

    Slider.prototype.changeSlide = function(index) {
      this.slider.style.marginLeft = '-'.concat(this.width * index, 'px');
    };

    Slider.prototype.throttle = function(callback, time) {
      var _this6 = this;

      var wait = false;
      return function(e) {
        if (!wait) {
          wait = true;
          callback.call(_this6, e);
          setTimeout(function() {
            wait = false;
          }, time + 100);
        }
      };
    };

    Slider.prototype.debounce = function(callback, time) {
      var _this7 = this;

      var timeout = null;
      return function() {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
          callback.call(_this7);
        }, time);
      };
    };

    Slider.prototype.createDots = function() {
      if (this.enableDots === true) {
        var dotsContainer = document.createElement('div');
        dotsContainer.classList.add('dots-container');
        this.container.appendChild(dotsContainer);

        for (var i = 0; i < this.slides.length; i++) {
          var dot = document.createElement('span');
          dot.classList.add('dot');
          dotsContainer.appendChild(dot);
          this.dots.push(dot);
        }

        this.dots[0].classList.add('active');
      }
    };

    Slider.prototype.changeSlideByDot = function(e) {
      var index = this.dots.indexOf(e.target);

      for (var i = 0; i < this.dots.length; i++) {
        this.dots[i].classList.remove('active');

        if (index === i) {
          this.changeSlide(index);
          this.currentDot = index;
          this.currentImage = index;
          this.dots[i].classList.add('active');
        }
      }
    };

    Slider.prototype.actualDot = function(operation) {
      if (this.enableDots === true) {
        this.dots.forEach(function(dot) {
          dot.classList.remove('active');
        });

        if (operation === -1) {
          this.currentDot--;

          if (this.currentDot < 0) {
            this.currentDot = this.dots.length - 1;
          }

          this.dots[this.currentDot].classList.add('active');
        } else if (operation === 1) {
          this.currentDot++;

          if (this.currentDot > this.dots.length - 1) {
            this.currentDot = 0;
          }

          this.dots[this.currentDot].classList.add('active');
        }
      }
    };

    Slider.prototype.startInterval = function(time) {
      var _this8 = this;

      if (this.auto === true) {
        this.interval = setInterval(function() {
          _this8.nextSlide();
        }, time);
      }
    };

    Slider.prototype.stopInterval = function() {
      if (this.auto === true) {
        clearInterval(this.interval);
      }
    };

    Slider.prototype.checkEvent = function(e) {
      if (e.target.className === 'dot') {
        this.changeSlideByDot(e);
      } else if (e.target.className === 'prev-btn') {
        this.prevSlide();
      } else if (e.target.className === 'next-btn') {
        this.nextSlide();
      }
    };

    Slider.prototype.addEvents = function() {
      this.wrapper.addEventListener('click', this.throttle(this.checkEvent, this.transitionTime));
      window.addEventListener('resize', this.throttle(this.setWidthOnElements, 50));
      window.addEventListener('resize', this.debounce(this.setWidthOnElements, 50));
      this.wrapper.addEventListener('mouseenter', this.stopInterval.bind(this));
      this.wrapper.addEventListener('mouseleave', this.startInterval.bind(this, this.pause));
    };

    Slider.prototype.init = function() {
      var _this9 = this;

      this.createContainer();
      this.createSlider();
      this.createSliderItems();
      setTimeout(function() {
        _this9.cloneFirstElement(_this9.sliderItems[0]);

        _this9.addItemsToSlider();

        _this9.setTransitionOnSlider();

        _this9.setWidthOnElements();

        _this9.createButtons();

        _this9.createDots();

        _this9.startInterval(_this9.pause);

        _this9.addEvents();
      }, 100);
    };

    return Slider;
  })();

  var info = [
    {
      image: '',
      // Here is your path to the image
      header: 'Title1',
      // Here is your header
      content:
        'Lorem ipsum dolor sit, amet consectetur adipisicing elit. Blanditiis nobis ad dolorum impedit dolor. Similique aut rerum, illum, enim veritatis alias, eum error neque voluptates non molestias distinctio praesentium labore.' // Here is your content
    },
    {
      image: '',
      // Here is your path to the image
      header: 'Title2',
      // Here is your header
      content:
        'Lorem ipsum dolor sit, amet consectetur adipisicing elit. Blanditiis nobis ad dolorum impedit dolor. Similique aut rerum, illum, enim veritatis alias, eum error neque voluptates non molestias distinctio praesentium labore.' // Here is your content
    }
  ];
  var mySlider = new Slider({
    wrapper: document.querySelector('.wrapper'),
    // Required
    slides: info // Required
  });
  mySlider.init();
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
